#The Gamma function
def Gamma(M,k=0):
    R.<x> = QQ['x']
    
    
    L = M.lattice_of_flats()
    E = M.groundset()
    # Sum over all proper flats of L(M)
    
    sum_proper_flats = 0
    for F in L:
        
        restriction = M.delete(E - F)
        Z_1 = tzf_recurrence(restriction)
        
        
        contraction = M.contract(F)
        chi = x_M(contraction)
        
        if type(chi) is Integer:
            sum_proper_flats += chi*Z_1
        else:
            sum_proper_flats += chi(x= k)*Z_1
        print(F,'---',M.rank(F))

    return sum_proper_flats


#A test to see what recurrence relation Gamma satisfies
def rcurr_gamma(M):  
    R.<s> = QQ['s']
    E = M.groundset()
    L = M.lattice_of_flats()
    sum_ = 0
    for F in L:
        if len(F) == 0:
            #sum_+= -s/(s+1)
            continue
        if F == E:
            continue
        restriction = M.delete(E-F)
        contraction = M.contract(F)
        sum_+= 1/(len(F)*s+M.rank(F))*(Gamma(restriction))
        #print(F, '----', sum_)
    
    return sum_

